if (count == 0) {
zeros <- zeros + 1
} else if (count == 1) {
ones <- ones + 1
} else if (count == 2) {
twos <- twos + 1
} else if (count == 3) {
threes <- threes + 1
} else if (count == 4) {
fours <- fours + 1
}
zero_proportions[i] <- zeros / i
one_proportions[i] <- ones / i
two_proportions[i] <- twos / i
three_proportions[i] <- threes / i
}
sequence <- seq(1, 1000)
data <- cbind(zero_proportions, one_proportions, two_proportions, three_proportions, four_proportions)
data
plot(data)
ggplot(data = data) +
geom_line(aes(x = sequence, y = zero_proportions))
# bags
bag1 <- c('blue', 'blue', 'red')
bag2 <- c(rep('blue', 2), rep('red', 3), 'white')
bags <- c('bag1', 'bag2')
repetitions <- 1000
# drawn_balls <- character(repetitions)
drawn_balls <- matrix(nrow = repetitions, ncol = 4)
set.seed(345)
for (i in 1:repetitions) {
rand <- runif(1)
if (rand > 0.5) {
drawn_balls[i,] <- sample(bag1, 4, replace = TRUE)
} else {
drawn_balls[i,] <- sample(bag2, 4)
}
}
head(drawn_balls)
table(drawn_balls)
table(drawn_balls) / repetitions
zero_proportions <- double(repetitions)
one_proportions <- double(repetitions)
two_proportions <- double(repetitions)
three_proportions <- double(repetitions)
four_proportions <- double(repetitions)
zeros <- 0
ones <- 0
twos <- 0
threes <- 0
fours <- 0
for (i in 1:repetitions) {
count <- sum(drawn_balls[i,] == 'blue')
if (count == 0) {
zeros <- zeros + 1
} else if (count == 1) {
ones <- ones + 1
} else if (count == 2) {
twos <- twos + 1
} else if (count == 3) {
threes <- threes + 1
} else if (count == 4) {
fours <- fours + 1
}
zero_proportions[i] <- zeros / i
one_proportions[i] <- ones / i
two_proportions[i] <- twos / i
three_proportions[i] <- threes / i
}
sequence <- seq(1, 1000)
data <- cbind(zero_proportions, one_proportions, two_proportions, three_proportions, four_proportions)
data
plot(data)
# bags
bag1 <- c('blue', 'blue', 'red')
bag2 <- c(rep('blue', 2), rep('red', 3), 'white')
bags <- c('bag1', 'bag2')
repetitions <- 1000
# drawn_balls <- character(repetitions)
drawn_balls <- matrix(nrow = repetitions, ncol = 4)
set.seed(345)
for (i in 1:repetitions) {
rand <- runif(1)
if (rand > 0.5) {
drawn_balls[i,] <- sample(bag1, 4, replace = TRUE)
} else {
drawn_balls[i,] <- sample(bag2, 4)
}
}
head(drawn_balls)
table(drawn_balls)
table(drawn_balls) / repetitions
zero_proportions <- double(repetitions)
one_proportions <- double(repetitions)
two_proportions <- double(repetitions)
three_proportions <- double(repetitions)
four_proportions <- double(repetitions)
zeros <- 0
ones <- 0
twos <- 0
threes <- 0
fours <- 0
for (i in 1:repetitions) {
count <- sum(drawn_balls[i,] == 'blue')
if (count == 0) {
zeros <- zeros + 1
} else if (count == 1) {
ones <- ones + 1
} else if (count == 2) {
twos <- twos + 1
} else if (count == 3) {
threes <- threes + 1
} else if (count == 4) {
fours <- fours + 1
}
zero_proportions[i] <- zeros / i
one_proportions[i] <- ones / i
two_proportions[i] <- twos / i
three_proportions[i] <- threes / i
}
sequence <- seq(1, 1000)
data <- cbind(zero_proportions, one_proportions, two_proportions, three_proportions, four_proportions)
data
plot(sequence, data['zero_proportions'])
# bags
bag1 <- c('blue', 'blue', 'red')
bag2 <- c(rep('blue', 2), rep('red', 3), 'white')
bags <- c('bag1', 'bag2')
repetitions <- 1000
# drawn_balls <- character(repetitions)
drawn_balls <- matrix(nrow = repetitions, ncol = 4)
set.seed(345)
for (i in 1:repetitions) {
rand <- runif(1)
if (rand > 0.5) {
drawn_balls[i,] <- sample(bag1, 4, replace = TRUE)
} else {
drawn_balls[i,] <- sample(bag2, 4)
}
}
head(drawn_balls)
table(drawn_balls)
table(drawn_balls) / repetitions
zero_proportions <- double(repetitions)
one_proportions <- double(repetitions)
two_proportions <- double(repetitions)
three_proportions <- double(repetitions)
four_proportions <- double(repetitions)
zeros <- 0
ones <- 0
twos <- 0
threes <- 0
fours <- 0
for (i in 1:repetitions) {
count <- sum(drawn_balls[i,] == 'blue')
if (count == 0) {
zeros <- zeros + 1
} else if (count == 1) {
ones <- ones + 1
} else if (count == 2) {
twos <- twos + 1
} else if (count == 3) {
threes <- threes + 1
} else if (count == 4) {
fours <- fours + 1
}
zero_proportions[i] <- zeros / i
one_proportions[i] <- ones / i
two_proportions[i] <- twos / i
three_proportions[i] <- threes / i
}
sequence <- seq(1, 1000)
data <- cbind(zero_proportions, one_proportions, two_proportions, three_proportions, four_proportions)
data
plot(sequence, data[,'zero_proportions'])
# bags
bag1 <- c('blue', 'blue', 'red')
bag2 <- c(rep('blue', 2), rep('red', 3), 'white')
bags <- c('bag1', 'bag2')
repetitions <- 1000
# drawn_balls <- character(repetitions)
drawn_balls <- matrix(nrow = repetitions, ncol = 4)
set.seed(345)
for (i in 1:repetitions) {
rand <- runif(1)
if (rand > 0.5) {
drawn_balls[i,] <- sample(bag1, 4, replace = TRUE)
} else {
drawn_balls[i,] <- sample(bag2, 4)
}
}
head(drawn_balls)
table(drawn_balls)
table(drawn_balls) / repetitions
zero_proportions <- double(repetitions)
one_proportions <- double(repetitions)
two_proportions <- double(repetitions)
three_proportions <- double(repetitions)
four_proportions <- double(repetitions)
zeros <- 0
ones <- 0
twos <- 0
threes <- 0
fours <- 0
for (i in 1:repetitions) {
count <- sum(drawn_balls[i,] == 'blue')
if (count == 0) {
zeros <- zeros + 1
} else if (count == 1) {
ones <- ones + 1
} else if (count == 2) {
twos <- twos + 1
} else if (count == 3) {
threes <- threes + 1
} else if (count == 4) {
fours <- fours + 1
}
zero_proportions[i] <- zeros / i
one_proportions[i] <- ones / i
two_proportions[i] <- twos / i
three_proportions[i] <- threes / i
}
sequence <- seq(1, 1000)
data <- cbind(zero_proportions, one_proportions, two_proportions, three_proportions, four_proportions)
data
plot(sequence, type = 'l', data[,'zero_proportions'])
# bags
bag1 <- c('blue', 'blue', 'red')
bag2 <- c(rep('blue', 2), rep('red', 3), 'white')
bags <- c('bag1', 'bag2')
repetitions <- 1000
# drawn_balls <- character(repetitions)
drawn_balls <- matrix(nrow = repetitions, ncol = 4)
set.seed(345)
for (i in 1:repetitions) {
rand <- runif(1)
if (rand > 0.5) {
drawn_balls[i,] <- sample(bag1, 4, replace = TRUE)
} else {
drawn_balls[i,] <- sample(bag2, 4)
}
}
head(drawn_balls)
table(drawn_balls)
table(drawn_balls) / repetitions
zero_proportions <- double(repetitions)
one_proportions <- double(repetitions)
two_proportions <- double(repetitions)
three_proportions <- double(repetitions)
four_proportions <- double(repetitions)
zeros <- 0
ones <- 0
twos <- 0
threes <- 0
fours <- 0
for (i in 1:repetitions) {
count <- sum(drawn_balls[i,] == 'blue')
if (count == 0) {
zeros <- zeros + 1
} else if (count == 1) {
ones <- ones + 1
} else if (count == 2) {
twos <- twos + 1
} else if (count == 3) {
threes <- threes + 1
} else if (count == 4) {
fours <- fours + 1
}
zero_proportions[i] <- zeros / i
one_proportions[i] <- ones / i
two_proportions[i] <- twos / i
three_proportions[i] <- threes / i
}
sequence <- seq(1, 1000)
data <- cbind(zero_proportions, one_proportions, two_proportions, three_proportions, four_proportions)
data
plot(sequence, type = 'l', data[,'zero_proportions'])
plot(sequence, type = 'l', data[,'one_proportions'])
# bags
bag1 <- c('blue', 'blue', 'red')
bag2 <- c(rep('blue', 2), rep('red', 3), 'white')
bags <- c('bag1', 'bag2')
repetitions <- 1000
# drawn_balls <- character(repetitions)
drawn_balls <- matrix(nrow = repetitions, ncol = 4)
set.seed(345)
for (i in 1:repetitions) {
rand <- runif(1)
if (rand > 0.5) {
drawn_balls[i,] <- sample(bag1, 4, replace = TRUE)
} else {
drawn_balls[i,] <- sample(bag2, 4)
}
}
head(drawn_balls)
table(drawn_balls)
table(drawn_balls) / repetitions
zero_proportions <- double(repetitions)
one_proportions <- double(repetitions)
two_proportions <- double(repetitions)
three_proportions <- double(repetitions)
four_proportions <- double(repetitions)
zeros <- 0
ones <- 0
twos <- 0
threes <- 0
fours <- 0
for (i in 1:repetitions) {
count <- sum(drawn_balls[i,] == 'blue')
if (count == 0) {
zeros <- zeros + 1
} else if (count == 1) {
ones <- ones + 1
} else if (count == 2) {
twos <- twos + 1
} else if (count == 3) {
threes <- threes + 1
} else if (count == 4) {
fours <- fours + 1
}
zero_proportions[i] <- zeros / i
one_proportions[i] <- ones / i
two_proportions[i] <- twos / i
three_proportions[i] <- threes / i
}
sequence <- seq(1, 1000)
data <- cbind(zero_proportions, one_proportions, two_proportions, three_proportions, four_proportions)
data
#ggplot(data = data, aes())
ggplot(data, aes(x = sequence, y = zero_proportions))
# bags
bag1 <- c('blue', 'blue', 'red')
bag2 <- c(rep('blue', 2), rep('red', 3), 'white')
bags <- c('bag1', 'bag2')
repetitions <- 1000
# drawn_balls <- character(repetitions)
drawn_balls <- matrix(nrow = repetitions, ncol = 4)
set.seed(345)
for (i in 1:repetitions) {
rand <- runif(1)
if (rand > 0.5) {
drawn_balls[i,] <- sample(bag1, 4, replace = TRUE)
} else {
drawn_balls[i,] <- sample(bag2, 4)
}
}
head(drawn_balls)
table(drawn_balls)
table(drawn_balls) / repetitions
zero_proportions <- double(repetitions)
one_proportions <- double(repetitions)
two_proportions <- double(repetitions)
three_proportions <- double(repetitions)
four_proportions <- double(repetitions)
zeros <- 0
ones <- 0
twos <- 0
threes <- 0
fours <- 0
for (i in 1:repetitions) {
count <- sum(drawn_balls[i,] == 'blue')
if (count == 0) {
zeros <- zeros + 1
} else if (count == 1) {
ones <- ones + 1
} else if (count == 2) {
twos <- twos + 1
} else if (count == 3) {
threes <- threes + 1
} else if (count == 4) {
fours <- fours + 1
}
zero_proportions[i] <- zeros / i
one_proportions[i] <- ones / i
two_proportions[i] <- twos / i
three_proportions[i] <- threes / i
}
sequence <- seq(1, 1000)
data <- cbind(zero_proportions, one_proportions, two_proportions, three_proportions, four_proportions)
data
#ggplot(data = data, aes())
ggplot(data = data, aes(x = sequence, y = zero_proportions))
shiny::runApp('College/Stat133/hw-stat133/workout2/workout2')
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
future_value <- function(amount, rate, years) {
return(amount * (1 + rate) ^ years)
}
future_value(amount = 100, rate = 0.05, years = 1)
future_value(amount = 500, rate = 0.05, years = 5)
future_value(amount = 1000, rate = 0.05, years = 10)
annuity <- function(contrib, rate, years) {
return(contrib * ((1 + rate) ^ years - 1) / rate)
}
annuity(contrib = 200, rate = 0.05, years = 1)
annuity(contrib = 200, rate = 0.05, years = 2)
annuity(contrib = 200, rate = 0.05, years = 10)
growing_annuity <- function(contrib, rate, growth, years) {
num <- (1 + rate) ^ years - (1 + growth) ^ years
den <- rate - growth
return(contrib * num / den)
}
growing_annuity(contrib = 200, rate = 0.05, growth = 0.03, years = 1)
growing_annuity(contrib = 200, rate = 0.05, growth = 0.03, years = 2)
growing_annuity(contrib = 200, rate = 0.05, growth = 0.03, years = 10)
iter <- 11
modalities <- matrix(NA, nrow=iter, ncol=4)
modalities[1, ] <- c(0, 1000.00, 1000.00, 1000.00)
for (x in 1:iter - 1)
modalities[x + 1,] <- c(x, future_value(1000, 0.05, x), future_value(1000, 0.05, x) + annuity(200, 0.05, x), future_value(1000, 0.05, x) + growing_annuity(200, .05, .03, x))
modalities
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("initial_amount",
"Initial Amount:",
min = 1,
max = 100000,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("timelines")
)
)
)
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
install(data.frame)
install.packages(data.frame)
install.packages("data.frame")
install.packages("reshape")
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
runApp('College/Stat133/hw-stat133/workout2/workout2')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='etian', token='0BB7C89C930967F1759031F3AED076B8', secret='Lmq/o6KBorNL6DWDkYjO0AViHiifCUVsrfvzIw15')
get_wd()
getwd()
library(rsconnect)
setwd("~/College/Stat133/hw-stat133/workout2")
rsconnect::deployApp('app.R')
setwd("~/College/Stat133/hw-stat133")
rsconnect::deployApp('workout2')
rsconnect::deployApp('workout2')
