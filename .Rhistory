80 + 20
phone <- 80
phone
total
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
total <- transportation + groceries + gym + rent + other
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
total <- transportation + groceries + gym + rent + other
total
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
total <- transportation + groceries + gym + rent + other
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
total <- transportation + groceries + gym + rent + other
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
total <- transportation + groceries + gym + rent + other
expenses <- c(phone, transportation, groceries, gym, rent, other)
knitr::opts_chunk$set(echo = TRUE)
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
total <- transportation + groceries + gym + rent + other
expenses <- c(phone, transportation, groceries, gym, rent, other)
barplot(expenses)
barplot(sort(expenses))
barplot(sort(expenses))
barplot(sort(expenses), las=2)
?Arithmetic
a <- 3
b <- 4
c <- sqrt(a ^ 2 + b ^ 2)
a <- 3
b <- 4
c <- sqrt(a ^ 2 + b ^ 2)
c
n <- 5
k <- 2
p <- .5
n_choose_k_factorial <- factorial(n) / (factorial(k) * factorial(n - k))
prob_factorial <- n_choose_k_factorial * p ^ k * (1 - p) ^ (n - k)
prob_factorial
n_choose_k_choose <- choose(n, k)
prob_choose <- n_choose_k_choose * p ^ k * (1 - p) ^ (n - k)
prob_choose
n <- 10
k <- 3
p <- 1 / 6
prob_three_sixes <- choose(n , k) * p ^ k * (1 - p) ^ (n - k)
n <- 10
k <- 3
p <- 1 / 6
prob_three_sixes <- choose(n , k) * p ^ k * (1 - p) ^ (n - k)
prob_three_sixes
??binomial
?Arithmetic
??binomial
prob_heads = dbinom(2, 5, .5)
prob_heads
prob_heads = dbinom(2, 5, .5)
prob_heads
prob_sixes = dbinom(3, 3, 1 / 6)
prob_sixes
prob_heads = dbinom(2, 5, .5)
prob_heads
prob_sixes = dbinom(3, 3, 1 / 6)
prob_sixes
prob_heads_biased = dbinom(2, 5, .35)
prob_heads_biased
prob_heads = dbinom(2, 5, .5)
prob_heads
prob_sixes = dbinom(3, 3, 1 / 6)
prob_sixes
prob_heads_biased = dbinom(2, 5, .35)
prob_heads_biased
prob_more_three_heads = dbinom(4, 5, .35) + dbinom(5, 5, .35)
prob_more_three_heads
install.packages(c("stringr", "RColorBrewer", "XML"))
x <-
wiofjwe
x <- 2
(3x^2 + 4x + 8)
3x^2 + 4x + 8
3 * x ^ 2 + 4 * x + 8
x <- -3:3
3 * x ^ 2 + 4 * x + 8
setwd("~/College/Stat133/homeworks")
knitr::opts_chunk$set(echo = TRUE)
# assembling url so it fits on the screen
github <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-hws/'
repo <- 'master/data/nba2018-players.csv'
datafile <- paste0(github, repo)
data_types <- cols(player = col_character(), team = col_character(), position = col_factor(), height = col_integer(), weight = col_integer(), age = col_integer(), experience = col_integer(), college = col_character(), salary = col_double(), games = col_integer(), minutes = col_integer(), points = col_integer(), points3 = col_integer(), points2 = col_integer(), points1 = col_integer())
install.packages("tidyverse")
# assembling url so it fits on the screen
github <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-hws/'
repo <- 'master/data/nba2018-players.csv'
datafile <- paste0(github, repo)
data_types <- readr::cols(player = col_character(), team = col_character(), position = col_factor(), height = col_integer(), weight = col_integer(), age = col_integer(), experience = col_integer(), college = col_character(), salary = col_double(), games = col_integer(), minutes = col_integer(), points = col_integer(), points3 = col_integer(), points2 = col_integer(), points1 = col_integer())
# assembling url so it fits on the screen
github <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-hws/'
repo <- 'master/data/nba2018-players.csv'
datafile <- paste0(github, repo)
data_types <- readr::cols(player = readr::col_character(), team = col_character(), position = col_factor(), height = col_integer(), weight = col_integer(), age = col_integer(), experience = col_integer(), college = col_character(), salary = col_double(), games = col_integer(), minutes = col_integer(), points = col_integer(), points3 = col_integer(), points2 = col_integer(), points1 = col_integer())
# assembling url so it fits on the screen
github <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-hws/'
repo <- 'master/data/nba2018-players.csv'
datafile <- paste0(github, repo)
data_types <- readr::cols(player = readr::col_character(), team = readr::col_character(), position = col_factor(), height = col_integer(), weight = col_integer(), age = col_integer(), experience = col_integer(), college = col_character(), salary = col_double(), games = col_integer(), minutes = col_integer(), points = col_integer(), points3 = col_integer(), points2 = col_integer(), points1 = col_integer())
knitr::opts_chunk$set(echo = TRUE)
library(readr)
# assembling url so it fits on the screen
github <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-hws/'
repo <- 'master/data/nba2018-players.csv'
datafile <- paste0(github, repo)
data_types <- readr::cols(player = readr::col_character(), team = readr::col_character(), position = col_factor(), height = col_integer(), weight = col_integer(), age = col_integer(), experience = col_integer(), college = col_character(), salary = col_double(), games = col_integer(), minutes = col_integer(), points = col_integer(), points3 = col_integer(), points2 = col_integer(), points1 = col_integer())
dat <- readr::read_csv(datafile, col_names = TRUE, col_types = data_types)
summary(dat)
# assembling url so it fits on the screen
github <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-hws/'
repo <- 'master/data/nba2018-players.csv'
datafile <- paste0(github, repo)
data_types <- cols(player = col_character(), team = col_character(), position = col_factor(), height = col_integer(), weight = col_integer(), age = col_integer(), experience = col_integer(), college = col_character(), salary = col_double(), games = col_integer(), minutes = col_integer(), points = col_integer(), points3 = col_integer(), points2 = col_integer(), points1 = col_integer())
dat <- read_csv(datafile, col_names = TRUE, col_types = data_types)
summary(dat)
# assembling url so it fits on the screen
github <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-hws/'
repo <- 'master/data/nba2018-players.csv'
datafile <- paste0(github, repo)
data_types <- cols(player = col_character(), team = col_character(), position = col_factor(), height = col_integer(), weight = col_integer(), age = col_integer(), experience = col_integer(), college = col_character(), salary = col_double(), games = col_integer(), minutes = col_integer(), points = col_integer(), points3 = col_integer(), points2 = col_integer(), points1 = col_integer())
dat <- read_csv(datafile, col_names = TRUE, col_types = data_types)
summary(dat)
class(dat)
# assembling url so it fits on the screen
github <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-hws/'
repo <- 'master/data/nba2018-players.csv'
datafile <- paste0(github, repo)
data_types <- cols(player = col_character(), team = col_character(), position = col_factor(), height = col_integer(), weight = col_integer(), age = col_integer(), experience = col_integer(), college = col_character(), salary = col_double(), games = col_integer(), minutes = col_integer(), points = col_integer(), points3 = col_integer(), points2 = col_integer(), points1 = col_integer())
dat <- read_csv(datafile, col_names = TRUE, col_types = data_types)
summary(dat)
typeof(dat)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
dat
dat
grouped <- group_by(dat, team)
grouped
dat
grouped <- group_by(dat, team)
grouped
summarized <- summarize(grouped, total_salary = sum(salary))
summarized
dat
grouped <- group_by(dat, team)
grouped
summarized <- summarize(grouped, total_salary = sum(salary), mean_salary = mean(salary), median_salary = median(salary))
summarized
dat
grouped <- group_by(dat, team)
grouped
summarized <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
summarized
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arranged(team_salaries, desc(total_salary))
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(team_salaries)
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(data = team_salaries) +
geom_bar()
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = team, y = total_salary)) +
geom_bar()
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = total_salary)) +
geom_bar()
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = total_salary)) +
geom_col()
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = team, y = total_salary)) +
geom_col()
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = team, y = total_salary)) +
geom_col() +
coord_flip()
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) +
geom_col() +
coord_flip()
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) +
geom_col() +
coord_flip() +
labs(tital = "NBA Team Ranked by Total Salary", x = "Team Name", y = "Total salary (in millions)")
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) +
geom_col() +
coord_flip() +
labs(tital = "NBA Team Ranked by Total Salary", x = "Team Name", y = "Total salary (in millions)") +
geom_vline(xintercept = mean(team_points$total_points) / 1000000, col = 'red')
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) +
geom_col() +
coord_flip() +
labs(tital = "NBA Team Ranked by Total Salary", x = "Team Name", y = "Total salary (in millions)") +
geom_vline(xintercept = mean(team_salaries$total_points) / 1000000, col = 'red')
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) +
geom_col() +
coord_flip() +
labs(tital = "NBA Team Ranked by Total Salary", x = "Team Name", y = "Total salary (in millions)") +
geom_vline(xintercept = mean(total_points) / 1000000, col = 'red')
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) +
geom_col() +
coord_flip() +
labs(tital = "NBA Team Ranked by Total Salary", x = "Team Name", y = "Total salary (in millions)") +
geom_vline(xintercept = mean(total_salary) / 1000000, col = 'red')
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) +
geom_col() +
coord_flip() +
labs(tital = "NBA Team Ranked by Total Salary", x = "Team Name", y = "Total salary (in millions)") +
geom_vline(xintercept = mean(team_salaries$total_salary) / 1000000, col = 'red')
dat
grouped <- group_by(dat, team)
grouped
team_salaries <- summarize(grouped, total_salary = sum(salary) / 1000000, mean_salary = mean(salary) / 1000000, median_salary = median(salary) / 1000000)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) +
geom_col() +
coord_flip() +
labs(tital = "NBA Team Ranked by Total Salary", x = "Team Name", y = "Total salary (in millions)") +
geom_vline(xintercept = mean(team_salaries$total_salary), col = 'red')
team_points <- summarize(grouped, total_points = sum(points) / 1000000, mean_points = mean(points) / 1000000, median_points = median(points) / 1000000)
team_points <- arrange(team_points, desc(total_points))
team_points
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) +
geom_col() +
coord_flip() +
labs(tital = "NBA Team Ranked by Total Salary", x = "Team Name", y = "Total salary (in millions)") +
geom_vline(xintercept = mean(team_salaries$total_salary), col = 'red')
team_points <- summarize(grouped, total_points = sum(points), mean_points = mean(points), median_points = median(points))
team_points <- arrange(team_points, desc(total_points))
team_points
as.data.frame(team_salaries)
ggplot(data = team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) +
geom_col() +
coord_flip() +
labs(tital = "NBA Team Ranked by Total Salary", x = "Team Name", y = "Total salary (in millions)") +
geom_vline(xintercept = mean(team_salaries$total_salary), col = 'red')
team_points <- summarize(grouped, total_points = sum(points), mean_points = mean(points), median_points = median(points))
team_points <- arrange(team_points, desc(total_points))
team_points
as.data.frame(team_points)
ggplot(data = team_points, aes(x = reorder(team, total_points), y = total_points)) +
geom_col() +
coord_flip() +
labs(tital = "NBA Team Ranked by Total Points", x = "Team Name", y = "Total points") +
geom_vline(xintercept = mean(team_points$total_points), col = 'red')
points_salary <- inner_join(team_salaries, team_points, by = team)
points_salary <- inner_join(team_salaries, team_points, by = "team")
points_salary
points_salary <- inner_join(team_salaries, team_points, by = "team")
points_salary
summary(points_salary)
points_salary <- inner_join(team_salaries, team_points, by = "team")
points_salary
summary(points_salary)
points_salary <- mutate(points_salary, cost_point = total_salary / total_points)
points_salary
points_salary <- inner_join(team_salaries, team_points, by = "team")
points_salary
summary(points_salary)
points_salary <- mutate(points_salary, cost_point = total_salary * 1000000 / total_points)
points_salary
points_salary <- inner_join(team_salaries, team_points, by = "team")
points_salary
summary(points_salary)
points_salary <- mutate(points_salary, cost_point = total_salary * 1000000 / total_points)
points_salary
summary(cost_point)
points_salary <- inner_join(team_salaries, team_points, by = "team")
points_salary
summary(points_salary)
points_salary <- mutate(points_salary, cost_point = total_salary * 1000000 / total_points)
points_salary
summary(points_salary$cost_point)
points_salary <- inner_join(team_salaries, team_points, by = "team")
points_salary
summary(points_salary)
points_salary <- mutate(points_salary, cost_point = total_salary * 1000000 / total_points)
points_salary
summary(points_salary$cost_point)
ggplot(data = points_salary, aes(x = reorder(team, cost_point), y = cost_point)) +
geom_col() +
coord_flip() +
labs(tital = "NBA Team Ranked by Point Cost", x = "Team Name", y = "Point Cost") +
geom_vline(xintercept = mean(points_salary$cost_point), col = 'red')
points_salary <- inner_join(team_salaries, team_points, by = "team")
points_salary
summary(points_salary)
points_salary <- mutate(points_salary, cost_point = total_salary * 1000000 / total_points)
points_salary
summary(points_salary$cost_point)
ggplot(data = points_salary, aes(x = reorder(team, cost_point), y = cost_point)) +
geom_col() +
coord_flip() +
labs(tital = "NBA Team Ranked by Point Cost", x = "Team Name", y = "Point Cost") +
geom_vline(xintercept = mean(points_salary$cost_point), col = 'red')
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point() +
geom_smooth(method = 'lm')
points_salary <- inner_join(team_salaries, team_points, by = "team")
points_salary
summary(points_salary)
points_salary <- mutate(points_salary, cost_point = total_salary * 1000000 / total_points)
points_salary
summary(points_salary$cost_point)
ggplot(data = points_salary, aes(x = reorder(team, cost_point), y = cost_point)) +
geom_col() +
coord_flip() +
labs(tital = "NBA Team Ranked by Point Cost", x = "Team Name", y = "Point Cost") +
geom_vline(xintercept = mean(points_salary$cost_point), col = 'red')
ggplot(data = points_salary, aes(x = median_salary, y = median_points)) +
geom_point() +
geom_text(aes(label = team)) +
geom_smooth(method = 'lm')
